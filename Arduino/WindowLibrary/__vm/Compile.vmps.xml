<VisualMicro>
  <Program Ext=".ino" Location="C:\Users\rohme\Source\Repos\PiMower\Arduino\WindowLibrary" Name="PicoWindows">
    <Compile IsDebugStart="1" IsGdb="0" CompilerErrors="0" ConfigurationName="Debug" UseConfigurationNameInBuildFolder="True" StopOnError="False" OptimiseLibs="True" OptimiseCore="True" BuildPath="C:\Users\rohme\AppData\Local\Temp\VMBuilds\PicoWindows\arduino_due_x_dbg\Debug" ReCompileIfSourceIsNewer="1" SketchName="PicoWindows" ReportDigitalPins="0" ReportAnalogPins="0" ReportI2C="0" ReportFreeMemory="0" IncludeDebug="1" LastDebugPreProcessorDefinitions="VM_DEBUG;VM_DEBUG_ENABLE 1;VM_DEBUG_BANDWIDTH_THROTTLE_MS 33;VM_DEBUGGER_TYPE_HARDWARESERIAL 0;VM_DEBUGGER_TYPE_SOFTWARESERIAL 1;VM_DEBUGGER_TYPE_FASTSERIAL 2;VM_DEBUGGER_TYPE_USB 3;VM_DEBUGGER_TYPE_TEENSY 4;VM_DEBUGGER_TYPE_UART 5;VM_DEBUGGER_TYPE_USART 6;VM_DEBUGGER_TYPE_USBSERIAL 7;VM_DEBUGGER_TYPE_TTYUART 8;VM_DEBUGGER_TYPE_NET_CONSOLE 9;VM_DEBUGGER_TYPE_Uart 10;VM_DEBUGGER_TYPE_COSA 11;VM_DEBUGGER_TYPE_CDCSerialClass 12;VM_DEBUGGER_TYPE_HARDWARESERIAL1 13;VM_DEBUGGER_TYPE_HARDWARESERIAL2 14;VM_DEBUGGER_TYPE_HARDWARESERIAL3 15;VM_DEBUGGER_TYPE_NET_UDP 16;VM_DEBUGGER_TYPE_USBAPI 17;VM_DEBUGGER_TYPE VM_DEBUGGER_TYPE_UART;VM_DEBUG_BREAKPAUSE;" IncludesDebug="1" IsCompiled="1" />
    <Platform Name="visualmicro" Package="arduino" Platform="sam" Architecture="4.8.3-2014q1">
      <Board Name="arduino_due_x_dbg" Description="Arduino Due (Programming Port)" CoreFolder="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.11\cores\arduino" VariantFullPath="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.11\variants\arduino_due_x" McuIdePath="C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\Extensions\02oghilb.30b\Micro Platforms\visualmicro\ide" McuSketchBookPath="C:\Users\rohme\Documents\Arduino" name="Arduino Due (Programming Port)" vid.0="0x2341" pid.0="0x003d" vid.1="0x2A03" pid.1="0x003d" upload.tool="bossac" upload.protocol="sam-ba" upload.maximum_size="524288" upload.use_1200bps_touch="true" upload.wait_for_upload_port="false" upload.native_usb="false" build.mcu="cortex-m3" build.f_cpu="84000000L" build.usb_manufacturer="&quot;Arduino LLC&quot;" build.usb_product="&quot;Arduino Due&quot;" build.board="SAM_DUE" build.core="arduino" build.extra_flags="-D__SAM3X8E__ -mthumb {build.usb_flags}" build.ldscript="linker_scripts/gcc/flash.ld" build.variant="arduino_due_x" build.variant_system_lib="libsam_sam3x8e_gcc_rel.a" build.vid="0x2341" build.pid="0x003e" runtime.ide.path="C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\Extensions\02oghilb.30b\Micro Platforms\visualmicro\ide" runtime.os="windows" build.system.path="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.11\system" runtime.ide.version="10801" target_package="arduino" target_platform="sam" runtime.hardware.path="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\hardware\sam" originalid="arduino_due_x_dbg" intellisense.tools.path="{runtime.ide.path}/hardware/tools/g++_arm_none_eabi" intellisense.include.paths="{runtime.tools.arm-none-eabi-gcc.path}/arm-none-eabi\include\c++\4.8.3;{runtime.tools.arm-none-eabi-gcc.path}/arm-none-eabi/include/c++/4.8.3/arm-none-eabi/;{runtime.tools.arm-none-eabi-gcc.path}/arm-none-eabi/include/;{runtime.tools.arm-none-eabi-gcc.path}\lib\gcc\arm-none-eabi\4.8.3\include;{build.core.coresparentfolder.vmresolved}\system\CMSIS\Device\ATMEL\;{build.core.coresparentfolder.vmresolved}\system\libsam;{build.core.coresparentfolder.vmresolved}\system\libsam\include;{build.core.coresparentfolder.vmresolved}\system\CMSIS\CMSIS\Include\;{build.core.coresparentfolder.vmresolved}\system\CMSIS\CMSIS\Include\;{vm.boardsource.path}\system\CMSIS\CMSIS\Include\;{vm.boardsource.path}\system\CMSIS\Device\ATMEL\;{vm.boardsource.path}\system\libsam;{vm.boardsource.path}\system\libsam\include;{intellisense.tools.path}\arm-none-eabi\include;{intellisense.tools.path}\arm_none_eabi\include\;{intellisense.tools.path}\lib\gcc\arm-none-eabi\4.4.1\include;{intellisense.tools.path}\lib\gcc\arm-none-eabi\4.4.1\include\;{build.core.coresparentfolder.vmresolved}/system/CMSIS/Device/ATMEL/sam3xa/include/pio;{build.core.coresparentfolder.vmresolved}/system/libsam/include;{build.core.coresparentfolder.vmresolved}/CMSIS/CMSIS/Include/;{build.core.coresparentfolder.vmresolved}/system/CMSIS/Device/ATMEL/sam3xa/include;{build.core.coresparentfolder.vmresolved}\system/libsam;{build.core.coresparentfolder.vmresolved}\system/CMSIS/Device/ATMEL;{build.core.coresparentfolder.vmresolved}\system/CMSIS/Device/ATMEL/sam3xa/include;" tools.atprogram.cmd.path="%AVRSTUDIO_EXE_PATH%\atbackend\atprogram" tools.atprogram.cmd.setwinpath="true" tools.atprogram.program.params.verbose="-v" tools.atprogram.program.params.quiet="-q" tools.atprogram.program.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.program.xpattern="&quot;{cmd.path}&quot; {AVRSTUDIO_BACKEND_CONNECTION} -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" version="1.6.11" compiler.warning_flags="-w" compiler.warning_flags.none="-w" compiler.warning_flags.default="" compiler.warning_flags.more="-Wall" compiler.warning_flags.all="-Wall -Wextra" compiler.path="{runtime.tools.arm-none-eabi-gcc.path}/bin/" compiler.c.cmd="arm-none-eabi-gcc" compiler.c.flags="-c -g -Os {compiler.warning_flags} -std=gnu11 -ffunction-sections -fdata-sections -nostdlib --param max-inline-insns-single=500 -Dprintf=iprintf -MMD" compiler.c.elf.cmd="arm-none-eabi-gcc" compiler.c.elf.flags="-Os -Wl,--gc-sections" compiler.S.cmd="arm-none-eabi-gcc" compiler.S.flags="-c -g -x assembler-with-cpp -MMD" compiler.cpp.cmd="arm-none-eabi-g++" compiler.cpp.flags="-c -g -Os {compiler.warning_flags} -std=gnu++11 -ffunction-sections -fdata-sections -nostdlib -fno-threadsafe-statics --param max-inline-insns-single=500 -fno-rtti -fno-exceptions -Dprintf=iprintf -MMD" compiler.ar.cmd="arm-none-eabi-ar" compiler.ar.flags="rcs" compiler.objcopy.cmd="arm-none-eabi-objcopy" compiler.objcopy.eep.flags="-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0" compiler.elf2hex.flags="-O binary" compiler.elf2hex.cmd="arm-none-eabi-objcopy" compiler.ldflags="" compiler.size.cmd="arm-none-eabi-size" compiler.define="-DARDUINO=" compiler.combine.flags="-u _sbrk -u link -u _close -u _fstat -u _isatty -u _lseek -u _read -u _write -u _exit -u kill -u _getpid" compiler.c.extra_flags="" compiler.c.elf.extra_flags="" compiler.cpp.extra_flags="" compiler.S.extra_flags="" compiler.ar.extra_flags="" compiler.elf2hex.extra_flags="" compiler.libsam.c.flags="&quot;-I{build.system.path}/libsam&quot; &quot;-I{build.system.path}/CMSIS/CMSIS/Include/&quot; &quot;-I{build.system.path}/CMSIS/Device/ATMEL/&quot;" build.usb_flags="-DUSB_VID={build.vid} -DUSB_PID={build.pid} -DUSBCON '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'" recipe.c.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.c.flags} -mcpu={build.mcu} -mthumb -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {compiler.libsam.c.flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.cpp.o.pattern="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} -mcpu={build.mcu} -mthumb -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {compiler.libsam.c.flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.S.o.pattern="&quot;{compiler.path}{compiler.S.cmd}&quot; {compiler.S.flags} -mcpu={build.mcu} -mthumb -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {compiler.libsam.c.flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" archive_file_path="{build.path}/{archive_file}" recipe.ar.pattern="&quot;{compiler.path}{compiler.ar.cmd}&quot; {compiler.ar.flags} {compiler.ar.extra_flags} &quot;{archive_file_path}&quot; &quot;{object_file}&quot;" recipe.c.combine.pattern="&quot;{compiler.path}{compiler.c.elf.cmd}&quot; -mcpu={build.mcu} -mthumb {compiler.c.elf.flags} &quot;-T{build.variant.path}/{build.ldscript}&quot; &quot;-Wl,-Map,{build.path}/{build.project_name}.map&quot; {compiler.c.elf.extra_flags} -o &quot;{build.path}/{build.project_name}.elf&quot; &quot;-L{build.path}&quot; -Wl,--cref -Wl,--check-sections -Wl,--gc-sections -Wl,--entry=Reset_Handler -Wl,--unresolved-symbols=report-all -Wl,--warn-common -Wl,--warn-section-align -Wl,--start-group {compiler.combine.flags} {object_files} &quot;{build.variant.path}/{build.variant_system_lib}&quot; &quot;{build.path}/{archive_file}&quot; -Wl,--end-group -lm -gcc" recipe.objcopy.bin.pattern="&quot;{compiler.path}{compiler.elf2hex.cmd}&quot; {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.bin&quot;" recipe.output.tmp_file="{build.project_name}.bin" recipe.output.save_file="{build.project_name}.{build.variant}.bin" recipe.size.pattern="&quot;{compiler.path}{compiler.size.cmd}&quot; -A &quot;{build.path}/{build.project_name}.elf&quot;" recipe.size.regex="\.text\s+([0-9]+).*" tools.bossac.path="{runtime.tools.bossac.path}" tools.bossac.cmd="bossac.exe" tools.bossac.cmd.windows="bossac.exe" tools.bossac.upload.params.verbose="-i -d" tools.bossac.upload.params.quiet="" tools.bossac.upload.params.verify="-v" tools.bossac.upload.pattern="&quot;{path}/{cmd}&quot; {upload.verbose} --port={serial.port.file} -U {upload.native_usb} -e -w {upload.verify} -b &quot;{build.path}/{build.project_name}.bin&quot; -R" tools.bossac_remote.upload.pattern="/usr/bin/run-bossac {upload.verbose} --port=ttyATH0 -U {upload.native_usb} -e -w -v -b /tmp/sketch.bin -R" vm.platform.root.path="C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\Extensions\02oghilb.30b\Micro Platforms\arduino16x" runtime.tools.arm-none-eabi-gcc.path="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\tools\arm-none-eabi-gcc\4.8.3-2014q1" runtime.tools.arm-none-eabi-gcc-4.8.3-2014q1.path="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\tools\arm-none-eabi-gcc\4.8.3-2014q1" runtime.tools.bossac.path="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\tools\bossac\1.6.1-arduino" runtime.tools.bossac-1.6.1-arduino.path="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\tools\bossac\1.6.1-arduino" runtime.vm.boardinfo.id="arduino_due_x_dbg" runtime.vm.boardinfo.name="arduino_due_x_dbg" runtime.vm.boardinfo.desc="Arduino Due (Programming Port)" runtime.vm.boardinfo.src_location="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.11" ide.hint="Ready-To-Go IDE: Use the Board and Library managers to install." ide.location.key="visualmicro" ide.location.ide.auto="true" ide.location.ide.winreg="Arduino Default Application" ide.location.sketchbook.winreg="Arduino Default Sketchbook" ide.location.sketchbook.preferences="sketchbook.path" ide.default.revision_name="1.8.2" ide.default.version="10802" ide.platforms.basedon="arduino16x" ide.default.package="arduino" ide.default.platform="avr" ide.multiplatform="true" ide.includes="arduino.h" ide.exe_name="arduino" ide.platformswithoutpackage="false" ide.includes.fallback="wprogram.h" ide.extension="ino" ide.extension.fallback="pde" ide.versionGTEQ="160" ide.hosts="atmel" vm.debug="true" software="ARDUINO" ssh.user.name="root" ssh.user.default.password="arduino" ssh.host.wwwfiles.path="/www/sd" ide.location.preferences.arduinoData="{runtime.sketchbook.path}\ArduinoData" ide.location.preferences="%VM_APPDATA_LOCAL%\arduino15\preferences.txt" ide.location.preferences_fallback="%VM_APPDATA_ROAMING%\arduino15\preferences.txt" ide.location.contributions="%VM_APPDATA_LOCAL%\arduino15" ide.location.contributions_fallback="%VM_APPDATA_ROAMING%\arduino15" ide.contributions.boards.allow="true" ide.contributions.boards.ignore_unless_rewrite_found="true" ide.contributions.libraries.allow="true" ide.contributions.boards.support.urls.wiki="https://github.com/arduino/Arduino/wiki/Unofficial-list-of-3rd-party-boards-support-urls" ide.create_platforms_from_boardsTXT.teensy="build.core" ide.appid="visualmicro" location.sketchbook="C:\Users\rohme\Documents\Arduino" build.core.vmresolved="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.11\cores\arduino" build.core.parentfolder.vmresolved="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.11\cores" build.core.coresparentfolder.vmresolved="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.11" build.core.path="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.11\cores\arduino" vm.core.include="arduino.h" vm.boardsource.path="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.11" runtime.platform.path="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.11" vm.platformname.name="sam" build.arch="SAM" build.vm.extra_cpp_flags="-fpermissive" builder.noino="false" build.variant.vmresolved="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.11\variants\arduino_due_x" build.architecture="4.8.3-2014q1" vmresolved.compiler.path="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\tools\arm-none-eabi-gcc\4.8.3-2014q1\bin\" vmresolved.tools.path="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\tools\arm-none-eabi-gcc\4.8.3-2014q1" vm.runtime.compiler.showwarnings="false" vm.runtime.upload.verbose="false" vm.runtime.upload.verify="false" serial.port.file="COM3" serial.port="COM3" serial.port.num="3" serial.port.caption="COM3   - Arduino Due Programming Port" serial.Caption="Arduino Due Programming Port (COM3)" serial.ClassGuid="{4d36e978-e325-11ce-bfc1-08002be10318}" serial.CompatibleID.value0="USB\Class_02" serial.ConfigManagerErrorCode="0" serial.ConfigManagerUserConfig="False" serial.CreationClassName="Win32_PnPEntity" serial.Description="Arduino Due Programming Port" serial.DeviceID="USB\VID_2A03&amp;PID_003D\95530343734351908191" serial.HardwareID.value0="USB\VID_2A03&amp;PID_003D" serial.Manufacturer="Arduino Srl (www.arduino.org)" serial.Name="Arduino Due Programming Port (COM3)" serial.PNPClass="Ports" serial.PNPDeviceID="USB\VID_2A03&amp;PID_003D\95530343734351908191" serial.Present="True" serial.Service="usbser" serial.Status="OK" serial.SystemCreationClassName="Win32_ComputerSystem" serial.SystemName="DESKTOP-ILJLV48" serial.vid="0x2A03" serial.pid="0x003D" serial.iserial="95530343734351908191" serial.port.iserial="95530343734351908191" build.path="C:\Users\rohme\AppData\Local\Temp\VMBuilds\PicoWindows\arduino_due_x_dbg\Debug" build.project_name="PicoWindows.ino" build.project_path="C:\Users\rohme\Source\Repos\PiMower\Arduino\WindowLibrary" ProjectDir="C:\Users\rohme\Source\Repos\PiMower\Arduino\WindowLibrary\" vm.runtime.compiler.auto_discover_includes="true" vm.runtime.compiler.auto_discover_includes_cache="true" build.vm.build.vmdebug="1" build.vm.build.isgdb="0" build.vm.build.optimised="1" vm.last.buildpath="C:\Users\rohme\AppData\Local\Temp\VMBuilds\PicoWindows\arduino_due_x_dbg\Debug" />
    </Platform>
    <Debug EnableBreak="1" DebugEnabled="1" InBreakLiveView="1" PerfStats="1" IsGdb="0" RemotePortSpeedWrittenToDebugSource="115200" />
    <VCCodeModel>
      <VCCodeMacros />
    </VCCodeModel>
    <BreakPoints>
      <BreakPoint Index="1" Name="UIElement.h, line 169" Id="2ce9ddb7-b0ca-412c-9690-61441cb943d6" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\rohme\source\repos\pimower\arduino\windowlibrary\uielements\uielement.h" FileLine="169" FileColumn="1" FunctionName="class UIElement::UpdateChildren()" FunctionLineOffset="4" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='2ce9ddb7-b0ca-412c-9690-61441cb943d6'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>162			return this-&gt;elementName;
163		}
164		
165		void UpdateChildren()
166		{
167			for (int i = 0; i &lt; childElements.size(); i++)
168			{
--&gt;169				UIElement &amp;uie = *childElements[i];			
170				uie.Update();
171			}
172		}
173	
174		~UIElement()
175		{
176		}
177	
178	private:
</Source>
      </BreakPoint>
      <BreakPoint Index="2" Name="WindowMananger.cpp, line 131" Id="76e30bd7-4754-45cc-bbdf-fad667f01727" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\rohme\source\repos\pimower\arduino\windowlibrary\windowmanager\windowmananger.cpp" FileLine="131" FileColumn="1" FunctionName="processTouch()" FunctionLineOffset="4" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='76e30bd7-4754-45cc-bbdf-fad667f01727'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>124		updateOccluded(controlID);
125	}
126	
127	void WindowManager::processTouch()
128	{
129		// Check power state triggers
130		uint32_t now = millis();
--&gt;131		if (now &gt; screenOffTrigger &amp;&amp; powerState!=ScreenOff)
132		{
133	#ifdef DEBUG
134			Logger::Trace("Switching TFT to Off State");
135	#endif
136			powerState = ePowerState::ScreenOff;
137			tft-&gt;backlightPower(0);
138			tft-&gt;backlightOn(false);
139		}
140		else
</Source>
      </BreakPoint>
      <BreakPoint Index="3" Name="WindowMananger.cpp, line 136" Id="622a3996-63f4-4341-87b3-0dbc110fbca4" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\rohme\source\repos\pimower\arduino\windowlibrary\windowmanager\windowmananger.cpp" FileLine="136" FileColumn="1" FunctionName="processTouch()" FunctionLineOffset="9" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='622a3996-63f4-4341-87b3-0dbc110fbca4'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>129		// Check power state triggers
130		uint32_t now = millis();
131		if (now &gt; screenOffTrigger &amp;&amp; powerState!=ScreenOff)
132		{
133	#ifdef DEBUG
134			Logger::Trace("Switching TFT to Off State");
135	#endif
--&gt;136			powerState = ePowerState::ScreenOff;
137			tft-&gt;backlightPower(0);
138			tft-&gt;backlightOn(false);
139		}
140		else
141		{
142			if (now &gt; lowPowerTrigger &amp;&amp; powerState != LowPower)
143			{
144	#ifdef DEBUG
145				Logger::Trace("Switching TFT to Low Power State");
</Source>
      </BreakPoint>
      <BreakPoint Index="4" Name="WindowMananger.cpp, line 147" Id="63bab5b3-f41c-46c5-8a48-8b641a04363e" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\rohme\source\repos\pimower\arduino\windowlibrary\windowmanager\windowmananger.cpp" FileLine="147" FileColumn="1" FunctionName="processTouch()" FunctionLineOffset="20" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='63bab5b3-f41c-46c5-8a48-8b641a04363e'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>140		else
141		{
142			if (now &gt; lowPowerTrigger &amp;&amp; powerState != LowPower)
143			{
144	#ifdef DEBUG
145				Logger::Trace("Switching TFT to Low Power State");
146	#endif
--&gt;147				powerState = ePowerState::LowPower;
148				tft-&gt;backlightPower(64);
149			}
150		}
151		
152		if (!tft-&gt;touched())
153		{
154			return;
155		}
156		if (powerState != Normal)
</Source>
      </BreakPoint>
      <BreakPoint Index="5" Name="UIButton.cpp, line 59" Id="04a78d90-8c13-4ad2-a0aa-598b44784df9" Enabled="1" Message="{location.x1}{location.y1}{location.width}{location.height}" MessageTextType="2" PreProcessedMessage="{0}{1}{2}{3}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\rohme\source\repos\pimower\arduino\windowlibrary\uielements\uibutton.cpp" FileLine="59" FileColumn="1" FunctionName="Update()" FunctionLineOffset="10" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='04a78d90-8c13-4ad2-a0aa-598b44784df9'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>52		{
53	#ifdef DEBUG
54			Logger::Trace("No update for UIButton pending");
55	#endif
56			return;
57		}
58	
--&gt;59		if (is3D)
60		{
61			Button::Draw(tft, !raised, location.x1, location.y1, location.width, location.height,
62				textColor, buttonBGColor, font, buttonText, true, cornerRadius, alpha, vertAlign);
63		}
64		else
65		{
66			Button::Draw(tft, !raised, location.x1, location.y1, location.width, location.height,
67				textColor, buttonBGColor, font, buttonText, false, cornerRadius, alpha, vertAlign);
68		}
</Source>
        <MessageVariables>
          <MessageVariable Name="location.x1" Index="1" />
          <MessageVariable Name="location.y1" Index="2" />
          <MessageVariable Name="location.width" Index="3" />
          <MessageVariable Name="location.height" Index="4" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="6" Name="NumericEntryFT8XX.cpp, line 176" Id="f6afb2f3-6337-4b4d-9698-50afd4d508e3" Enabled="1" Message="{controlBGColor}" MessageTextType="2" PreProcessedMessage="{0}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\rohme\source\repos\pimower\arduino\windowlibrary\uielements\controldisplay\numericentryft8xx.cpp" FileLine="176" FileColumn="1" FunctionName="UpdateInput(DriverBase &amp;tft, uint16_t x, uint16_t y, uint16_t controlBGColor,&#xD;&#xA;	uint16_t textColor, eUITextFont font, std::string inputValue, bool is3D)" FunctionLineOffset="13" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='f6afb2f3-6337-4b4d-9698-50afd4d508e3'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>169			else
170				x = 115;		// (Width/2 == 240) -(ControlWidth/2 == 125) = 115
171		}
172		if (y == 0)
173		{
174			if (tft.isLandscape())
175			{
--&gt;176				y = 9;
177			}
178			else
179			{
180				y = 169;
181			}
182		}
183	
184	
185		// Input widget is 5 down from the top and left, and the width - 10 
</Source>
        <MessageVariables>
          <MessageVariable Name="controlBGColor" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="7" Name="NumericEntryFT8XX.cpp, line 201" Id="efc9411a-5a3b-49a9-b949-b0b7bf3635cf" Enabled="1" Message="{ptr}" MessageTextType="2" PreProcessedMessage="{0}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\rohme\source\repos\pimower\arduino\windowlibrary\uielements\controldisplay\numericentryft8xx.cpp" FileLine="201" FileColumn="1" FunctionName="UpdateInput(DriverBase &amp;tft, uint16_t x, uint16_t y, uint16_t controlBGColor,&#xD;&#xA;	uint16_t textColor, eUITextFont font, std::string inputValue, bool is3D)" FunctionLineOffset="38" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='efc9411a-5a3b-49a9-b949-b0b7bf3635cf'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="0">
        <Source>194		uint16_t textHeight = rect.height;
195		if (rect.width &gt; 235)
196		{
197			// We cant show all the items, so we show the most we can
198			int ptr = 1;
199			while (FontHelper::GetTextRect(tft, inputValue.substr(inputValue.size() - ptr), font, Point(0, 0)).width &lt; 235)
200			{
--&gt;201				ptr++;
202			}
203			ptr=ptr-1;
204			inputValue = inputValue.substr(ptr);
205			textWidth = FontHelper::GetTextRect(tft, inputValue, font, Point(0, 0)).width;
206		}
207		UIPrimitives::Text(tft, textColor, 255, x + 5+textWidth/2, y + textHeight/2-5, font, is3D, inputValue);
208	}
209	
210	/// &lt;summary&gt;
</Source>
        <MessageVariables>
          <MessageVariable Name="ptr" Index="1" />
        </MessageVariables>
      </BreakPoint>
      <BreakPoint Index="8" Name="NumericEntryFT8XX.cpp, line 207" Id="75f2e320-2438-454d-8de4-2f2e1203cc36" Enabled="1" Message="{x}{textWidth}" MessageTextType="2" PreProcessedMessage="{0}{1}" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\rohme\source\repos\pimower\arduino\windowlibrary\uielements\controldisplay\numericentryft8xx.cpp" FileLine="207" FileColumn="1" FunctionName="UpdateInput(DriverBase &amp;tft, uint16_t x, uint16_t y, uint16_t controlBGColor,&#xD;&#xA;	uint16_t textColor, eUITextFont font, std::string inputValue, bool is3D)" FunctionLineOffset="44" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='75f2e320-2438-454d-8de4-2f2e1203cc36'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>200			{
201				ptr++;
202			}
203			ptr=ptr-1;
204			inputValue = inputValue.substr(ptr);
205			textWidth = FontHelper::GetTextRect(tft, inputValue, font, Point(0, 0)).width;
206		}
--&gt;207		UIPrimitives::Text(tft, textColor, 255, x + 5+textWidth/2, y + textHeight/2-5, font, is3D, inputValue);
208	}
209	
210	/// &lt;summary&gt;
211	/// Processes the touch point
212	/// &lt;/summary&gt;
213	/// &lt;param name="pt"&gt;The pt.&lt;/param&gt;
214	/// &lt;returns&gt;value each time, complete=true if it is complete&lt;/returns&gt;
215	std::string NumericEntry::ProcessTouch(DriverBase &amp;tft, std::string value, uint16_t x, uint16_t y, Point pt, bool &amp;complete,
216		bool singleDecimal)
</Source>
        <MessageVariables>
          <MessageVariable Name="x" Index="1" />
          <MessageVariable Name="textWidth" Index="2" />
        </MessageVariables>
      </BreakPoint>
    </BreakPoints>
  </Program>
</VisualMicro>