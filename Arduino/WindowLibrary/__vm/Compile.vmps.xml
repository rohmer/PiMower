<VisualMicro>
  <Program Ext=".ino" Location="C:\Users\rohme\Source\Repos\PiMower\Arduino\WindowLibrary" Name="PicoWindows">
    <Compile IsDebugStart="1" IsGdb="0" CompilerErrors="0" ConfigurationName="Debug" UseConfigurationNameInBuildFolder="True" StopOnError="False" OptimiseLibs="True" OptimiseCore="True" BuildPath="C:\Users\rohme\AppData\Local\Temp\VMBuilds\PicoWindows\arduino_due_x_dbg\Debug" ReCompileIfSourceIsNewer="1" SketchName="PicoWindows" ReportDigitalPins="0" ReportAnalogPins="0" ReportI2C="0" ReportFreeMemory="0" IncludeDebug="1" LastDebugPreProcessorDefinitions="VM_DEBUG;VM_DEBUG_ENABLE 1;VM_DEBUG_BANDWIDTH_THROTTLE_MS 33;VM_DEBUGGER_TYPE_HARDWARESERIAL 0;VM_DEBUGGER_TYPE_SOFTWARESERIAL 1;VM_DEBUGGER_TYPE_FASTSERIAL 2;VM_DEBUGGER_TYPE_USB 3;VM_DEBUGGER_TYPE_TEENSY 4;VM_DEBUGGER_TYPE_UART 5;VM_DEBUGGER_TYPE_USART 6;VM_DEBUGGER_TYPE_USBSERIAL 7;VM_DEBUGGER_TYPE_TTYUART 8;VM_DEBUGGER_TYPE_NET_CONSOLE 9;VM_DEBUGGER_TYPE_Uart 10;VM_DEBUGGER_TYPE_COSA 11;VM_DEBUGGER_TYPE_CDCSerialClass 12;VM_DEBUGGER_TYPE_HARDWARESERIAL1 13;VM_DEBUGGER_TYPE_HARDWARESERIAL2 14;VM_DEBUGGER_TYPE_HARDWARESERIAL3 15;VM_DEBUGGER_TYPE_NET_UDP 16;VM_DEBUGGER_TYPE_USBAPI 17;VM_DEBUGGER_TYPE VM_DEBUGGER_TYPE_UART;VM_DEBUG_BREAKPAUSE;" IncludesDebug="1" IsCompiled="1" />
    <Platform Name="visualmicro" Package="arduino" Platform="sam" Architecture="4.8.3-2014q1">
      <Board Name="arduino_due_x_dbg" Description="Arduino Due (Programming Port)" CoreFolder="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.11\cores\arduino" VariantFullPath="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.11\variants\arduino_due_x" McuIdePath="C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\Extensions\02oghilb.30b\Micro Platforms\visualmicro\ide" McuSketchBookPath="C:\Users\rohme\Documents\Arduino" name="Arduino Due (Programming Port)" vid.0="0x2341" pid.0="0x003d" vid.1="0x2A03" pid.1="0x003d" upload.tool="bossac" upload.protocol="sam-ba" upload.maximum_size="524288" upload.use_1200bps_touch="true" upload.wait_for_upload_port="false" upload.native_usb="false" build.mcu="cortex-m3" build.f_cpu="84000000L" build.usb_manufacturer="&quot;Arduino LLC&quot;" build.usb_product="&quot;Arduino Due&quot;" build.board="SAM_DUE" build.core="arduino" build.extra_flags="-D__SAM3X8E__ -mthumb {build.usb_flags}" build.ldscript="linker_scripts/gcc/flash.ld" build.variant="arduino_due_x" build.variant_system_lib="libsam_sam3x8e_gcc_rel.a" build.vid="0x2341" build.pid="0x003e" runtime.ide.path="C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\Extensions\02oghilb.30b\Micro Platforms\visualmicro\ide" runtime.os="windows" build.system.path="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.11\system" runtime.ide.version="10801" target_package="arduino" target_platform="sam" runtime.hardware.path="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\hardware\sam" originalid="arduino_due_x_dbg" intellisense.tools.path="{runtime.ide.path}/hardware/tools/g++_arm_none_eabi" intellisense.include.paths="{runtime.tools.arm-none-eabi-gcc.path}/arm-none-eabi\include\c++\4.8.3;{runtime.tools.arm-none-eabi-gcc.path}/arm-none-eabi/include/c++/4.8.3/arm-none-eabi/;{runtime.tools.arm-none-eabi-gcc.path}/arm-none-eabi/include/;{runtime.tools.arm-none-eabi-gcc.path}\lib\gcc\arm-none-eabi\4.8.3\include;{build.core.coresparentfolder.vmresolved}\system\CMSIS\Device\ATMEL\;{build.core.coresparentfolder.vmresolved}\system\libsam;{build.core.coresparentfolder.vmresolved}\system\libsam\include;{build.core.coresparentfolder.vmresolved}\system\CMSIS\CMSIS\Include\;{build.core.coresparentfolder.vmresolved}\system\CMSIS\CMSIS\Include\;{vm.boardsource.path}\system\CMSIS\CMSIS\Include\;{vm.boardsource.path}\system\CMSIS\Device\ATMEL\;{vm.boardsource.path}\system\libsam;{vm.boardsource.path}\system\libsam\include;{intellisense.tools.path}\arm-none-eabi\include;{intellisense.tools.path}\arm_none_eabi\include\;{intellisense.tools.path}\lib\gcc\arm-none-eabi\4.4.1\include;{intellisense.tools.path}\lib\gcc\arm-none-eabi\4.4.1\include\;{build.core.coresparentfolder.vmresolved}/system/CMSIS/Device/ATMEL/sam3xa/include/pio;{build.core.coresparentfolder.vmresolved}/system/libsam/include;{build.core.coresparentfolder.vmresolved}/CMSIS/CMSIS/Include/;{build.core.coresparentfolder.vmresolved}/system/CMSIS/Device/ATMEL/sam3xa/include;{build.core.coresparentfolder.vmresolved}\system/libsam;{build.core.coresparentfolder.vmresolved}\system/CMSIS/Device/ATMEL;{build.core.coresparentfolder.vmresolved}\system/CMSIS/Device/ATMEL/sam3xa/include;" tools.atprogram.cmd.path="%AVRSTUDIO_EXE_PATH%\atbackend\atprogram" tools.atprogram.cmd.setwinpath="true" tools.atprogram.program.params.verbose="-v" tools.atprogram.program.params.quiet="-q" tools.atprogram.program.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.program.xpattern="&quot;{cmd.path}&quot; {AVRSTUDIO_BACKEND_CONNECTION} -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" version="1.6.11" compiler.warning_flags="-w" compiler.warning_flags.none="-w" compiler.warning_flags.default="" compiler.warning_flags.more="-Wall" compiler.warning_flags.all="-Wall -Wextra" compiler.path="{runtime.tools.arm-none-eabi-gcc.path}/bin/" compiler.c.cmd="arm-none-eabi-gcc" compiler.c.flags="-c -g -Os {compiler.warning_flags} -std=gnu11 -ffunction-sections -fdata-sections -nostdlib --param max-inline-insns-single=500 -Dprintf=iprintf -MMD" compiler.c.elf.cmd="arm-none-eabi-gcc" compiler.c.elf.flags="-Os -Wl,--gc-sections" compiler.S.cmd="arm-none-eabi-gcc" compiler.S.flags="-c -g -x assembler-with-cpp -MMD" compiler.cpp.cmd="arm-none-eabi-g++" compiler.cpp.flags="-c -g -Os {compiler.warning_flags} -std=gnu++11 -ffunction-sections -fdata-sections -nostdlib -fno-threadsafe-statics --param max-inline-insns-single=500 -fno-rtti -fno-exceptions -Dprintf=iprintf -MMD" compiler.ar.cmd="arm-none-eabi-ar" compiler.ar.flags="rcs" compiler.objcopy.cmd="arm-none-eabi-objcopy" compiler.objcopy.eep.flags="-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0" compiler.elf2hex.flags="-O binary" compiler.elf2hex.cmd="arm-none-eabi-objcopy" compiler.ldflags="" compiler.size.cmd="arm-none-eabi-size" compiler.define="-DARDUINO=" compiler.combine.flags="-u _sbrk -u link -u _close -u _fstat -u _isatty -u _lseek -u _read -u _write -u _exit -u kill -u _getpid" compiler.c.extra_flags="" compiler.c.elf.extra_flags="" compiler.cpp.extra_flags="" compiler.S.extra_flags="" compiler.ar.extra_flags="" compiler.elf2hex.extra_flags="" compiler.libsam.c.flags="&quot;-I{build.system.path}/libsam&quot; &quot;-I{build.system.path}/CMSIS/CMSIS/Include/&quot; &quot;-I{build.system.path}/CMSIS/Device/ATMEL/&quot;" build.usb_flags="-DUSB_VID={build.vid} -DUSB_PID={build.pid} -DUSBCON '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'" recipe.c.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.c.flags} -mcpu={build.mcu} -mthumb -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {compiler.libsam.c.flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.cpp.o.pattern="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} -mcpu={build.mcu} -mthumb -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {compiler.libsam.c.flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.S.o.pattern="&quot;{compiler.path}{compiler.S.cmd}&quot; {compiler.S.flags} -mcpu={build.mcu} -mthumb -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {compiler.libsam.c.flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" archive_file_path="{build.path}/{archive_file}" recipe.ar.pattern="&quot;{compiler.path}{compiler.ar.cmd}&quot; {compiler.ar.flags} {compiler.ar.extra_flags} &quot;{archive_file_path}&quot; &quot;{object_file}&quot;" recipe.c.combine.pattern="&quot;{compiler.path}{compiler.c.elf.cmd}&quot; -mcpu={build.mcu} -mthumb {compiler.c.elf.flags} &quot;-T{build.variant.path}/{build.ldscript}&quot; &quot;-Wl,-Map,{build.path}/{build.project_name}.map&quot; {compiler.c.elf.extra_flags} -o &quot;{build.path}/{build.project_name}.elf&quot; &quot;-L{build.path}&quot; -Wl,--cref -Wl,--check-sections -Wl,--gc-sections -Wl,--entry=Reset_Handler -Wl,--unresolved-symbols=report-all -Wl,--warn-common -Wl,--warn-section-align -Wl,--start-group {compiler.combine.flags} {object_files} &quot;{build.variant.path}/{build.variant_system_lib}&quot; &quot;{build.path}/{archive_file}&quot; -Wl,--end-group -lm -gcc" recipe.objcopy.bin.pattern="&quot;{compiler.path}{compiler.elf2hex.cmd}&quot; {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.bin&quot;" recipe.output.tmp_file="{build.project_name}.bin" recipe.output.save_file="{build.project_name}.{build.variant}.bin" recipe.size.pattern="&quot;{compiler.path}{compiler.size.cmd}&quot; -A &quot;{build.path}/{build.project_name}.elf&quot;" recipe.size.regex="\.text\s+([0-9]+).*" tools.bossac.path="{runtime.tools.bossac.path}" tools.bossac.cmd="bossac.exe" tools.bossac.cmd.windows="bossac.exe" tools.bossac.upload.params.verbose="-i -d" tools.bossac.upload.params.quiet="" tools.bossac.upload.params.verify="-v" tools.bossac.upload.pattern="&quot;{path}/{cmd}&quot; {upload.verbose} --port={serial.port.file} -U {upload.native_usb} -e -w {upload.verify} -b &quot;{build.path}/{build.project_name}.bin&quot; -R" tools.bossac_remote.upload.pattern="/usr/bin/run-bossac {upload.verbose} --port=ttyATH0 -U {upload.native_usb} -e -w -v -b /tmp/sketch.bin -R" vm.platform.root.path="C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\Extensions\02oghilb.30b\Micro Platforms\arduino16x" runtime.tools.arm-none-eabi-gcc.path="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\tools\arm-none-eabi-gcc\4.8.3-2014q1" runtime.tools.arm-none-eabi-gcc-4.8.3-2014q1.path="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\tools\arm-none-eabi-gcc\4.8.3-2014q1" runtime.tools.bossac.path="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\tools\bossac\1.6.1-arduino" runtime.tools.bossac-1.6.1-arduino.path="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\tools\bossac\1.6.1-arduino" runtime.vm.boardinfo.id="arduino_due_x_dbg" runtime.vm.boardinfo.name="arduino_due_x_dbg" runtime.vm.boardinfo.desc="Arduino Due (Programming Port)" runtime.vm.boardinfo.src_location="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.11" ide.hint="Ready-To-Go IDE: Use the Board and Library managers to install." ide.location.key="visualmicro" ide.location.ide.auto="true" ide.location.ide.winreg="Arduino Default Application" ide.location.sketchbook.winreg="Arduino Default Sketchbook" ide.location.sketchbook.preferences="sketchbook.path" ide.default.revision_name="1.8.2" ide.default.version="10802" ide.platforms.basedon="arduino16x" ide.default.package="arduino" ide.default.platform="avr" ide.multiplatform="true" ide.includes="arduino.h" ide.exe_name="arduino" ide.platformswithoutpackage="false" ide.includes.fallback="wprogram.h" ide.extension="ino" ide.extension.fallback="pde" ide.versionGTEQ="160" ide.hosts="atmel" vm.debug="true" software="ARDUINO" ssh.user.name="root" ssh.user.default.password="arduino" ssh.host.wwwfiles.path="/www/sd" ide.location.preferences.arduinoData="{runtime.sketchbook.path}\ArduinoData" ide.location.preferences="%VM_APPDATA_LOCAL%\arduino15\preferences.txt" ide.location.preferences_fallback="%VM_APPDATA_ROAMING%\arduino15\preferences.txt" ide.location.contributions="%VM_APPDATA_LOCAL%\arduino15" ide.location.contributions_fallback="%VM_APPDATA_ROAMING%\arduino15" ide.contributions.boards.allow="true" ide.contributions.boards.ignore_unless_rewrite_found="true" ide.contributions.libraries.allow="true" ide.contributions.boards.support.urls.wiki="https://github.com/arduino/Arduino/wiki/Unofficial-list-of-3rd-party-boards-support-urls" ide.create_platforms_from_boardsTXT.teensy="build.core" ide.appid="visualmicro" location.sketchbook="C:\Users\rohme\Documents\Arduino" build.core.vmresolved="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.11\cores\arduino" build.core.parentfolder.vmresolved="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.11\cores" build.core.coresparentfolder.vmresolved="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.11" build.core.path="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.11\cores\arduino" vm.core.include="arduino.h" vm.boardsource.path="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.11" runtime.platform.path="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.11" vm.platformname.name="sam" build.arch="SAM" build.vm.extra_cpp_flags="-fpermissive" builder.noino="false" build.variant.vmresolved="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\hardware\sam\1.6.11\variants\arduino_due_x" build.architecture="4.8.3-2014q1" vmresolved.compiler.path="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\tools\arm-none-eabi-gcc\4.8.3-2014q1\bin\" vmresolved.tools.path="C:\Users\rohme\AppData\Local\arduino15\packages\arduino\tools\arm-none-eabi-gcc\4.8.3-2014q1" vm.runtime.compiler.showwarnings="false" vm.runtime.upload.verbose="false" vm.runtime.upload.verify="false" serial.port.file="COM3" serial.port="COM3" serial.port.num="3" serial.port.caption="COM3   - Arduino Due Programming Port" serial.Caption="Arduino Due Programming Port (COM3)" serial.ClassGuid="{4d36e978-e325-11ce-bfc1-08002be10318}" serial.CompatibleID.value0="USB\Class_02" serial.ConfigManagerErrorCode="0" serial.ConfigManagerUserConfig="False" serial.CreationClassName="Win32_PnPEntity" serial.Description="Arduino Due Programming Port" serial.DeviceID="USB\VID_2A03&amp;PID_003D\95530343734351908191" serial.HardwareID.value0="USB\VID_2A03&amp;PID_003D" serial.Manufacturer="Arduino Srl (www.arduino.org)" serial.Name="Arduino Due Programming Port (COM3)" serial.PNPClass="Ports" serial.PNPDeviceID="USB\VID_2A03&amp;PID_003D\95530343734351908191" serial.Present="True" serial.Service="usbser" serial.Status="OK" serial.SystemCreationClassName="Win32_ComputerSystem" serial.SystemName="DESKTOP-ILJLV48" serial.vid="0x2A03" serial.pid="0x003D" serial.iserial="95530343734351908191" serial.port.iserial="95530343734351908191" build.path="C:\Users\rohme\AppData\Local\Temp\VMBuilds\PicoWindows\arduino_due_x_dbg\Debug" build.project_name="PicoWindows.ino" build.project_path="C:\Users\rohme\Source\Repos\PiMower\Arduino\WindowLibrary" ProjectDir="C:\Users\rohme\Source\Repos\PiMower\Arduino\WindowLibrary\" vm.runtime.compiler.auto_discover_includes="true" vm.runtime.compiler.auto_discover_includes_cache="true" build.vm.build.vmdebug="1" build.vm.build.isgdb="0" build.vm.build.optimised="1" vm.last.buildpath="C:\Users\rohme\AppData\Local\Temp\VMBuilds\PicoWindows\arduino_due_x_dbg\Debug" />
    </Platform>
    <Debug EnableBreak="1" DebugEnabled="1" InBreakLiveView="1" PerfStats="1" IsGdb="0" RemotePortSpeedWrittenToDebugSource="115200" />
    <VCCodeModel>
      <VCCodeMacros />
    </VCCodeModel>
    <BreakPoints>
      <BreakPoint Index="1" Name="WindowManager.h, line 40" Id="52175f67-0e87-4920-adfb-73aaf04e213b" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\rohme\source\repos\pimower\arduino\windowlibrary\windowmanager\windowmanager.h" FileLine="40" FileColumn="1" FunctionName="class WindowManager::instance(const uint8_t cs=10, const uint8_t rst = 9,&#xD;&#xA;		const uint8_t mosi = 11, const uint8_t sclk = 13, const uint8_t miso = 12,&#xD;&#xA;		eLCDSizes lcdSize = eLCDSizes::lcd800x480)" FunctionLineOffset="4" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='52175f67-0e87-4920-adfb-73aaf04e213b'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>33	
34		static WindowManager *instance(const uint8_t cs=10, const uint8_t rst = 9,
35			const uint8_t mosi = 11, const uint8_t sclk = 13, const uint8_t miso = 12,
36			eLCDSizes lcdSize = eLCDSizes::lcd800x480)
37		{
38			if (!s_instance)
39			{
--&gt;40				s_instance = new WindowManager(cs, rst, mosi, sclk, miso, lcdSize);
41			}
42			return s_instance;
43		}
44	
45		void MoveControlToFront(unsigned long controlID);
46		void DeleteElement(unsigned long elementID);
47		
48		void RegisterElement(UIElement *element);
49	
</Source>
      </BreakPoint>
      <BreakPoint Index="2" Name="UIWindow.cpp, line 13" Id="fe12eed8-3ee5-4b89-b696-6353c6bcdd4a" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\rohme\source\repos\pimower\arduino\windowlibrary\uielements\uiwindow.cpp" FileLine="13" FileColumn="1" FunctionName="UIWindow(DriverBase &amp;tft, Rectangle location, eUITextFont titleBarFont,&#xD;&#xA;	std::string titleText = &quot;&quot;, bool hasTitleBar = false, bool hasCloseIcon = false,&#xD;&#xA;	bool hasChrome = false, bool isModal = false, bool is3D = true,&#xD;&#xA;	uint32_t titleBarColor = Color::GetColor(Color::Blue),&#xD;&#xA;	uint32_t titleTextColor = Color::GetColor(Color::White),&#xD;&#xA;	uint32_t chromeColor = Color::GetColor(Color::White),&#xD;&#xA;	uint32_t windowColor = Color::GetColor(Color::Black), uint8_t cornerRadius = 5,&#xD;&#xA;	std::string elementName = &quot;&quot;)" FunctionLineOffset="2" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='fe12eed8-3ee5-4b89-b696-6353c6bcdd4a'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>6		tColor  titleBarColor = Color::GetColor(Color::Blue),
7		tColor  titleTextColor = Color::GetColor(Color::White),
8		tColor  chromeColor = Color::GetColor(Color::White),
9		tColor  windowColor = Color::GetColor(Color::Black), uint8_t cornerRadius = 5,
10		std::string elementName = "")
11		: UIElement(tft, location, elementName, eElementType::Window)
12	{
--&gt;13		this-&gt;titleText = titleText;
14		this-&gt;hasTitleBar = hasTitleBar;
15		this-&gt;hasChrome = hasChrome;
16		this-&gt;hasCloseIcon = hasCloseIcon;
17		this-&gt;isModal = isModal;
18		this-&gt;titleTextColor = titleTextColor;
19		this-&gt;titleBarColor = titleBarColor;
20		this-&gt;chromeColor = chromeColor;
21		this-&gt;windowColor = windowColor;
22		this-&gt;titleBarFont = titleBarFont;	
</Source>
      </BreakPoint>
      <BreakPoint Index="3" Name="UIElement.h, line 54" Id="6f95282c-5fe6-4950-9647-32e9bdfc1372" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\rohme\source\repos\pimower\arduino\windowlibrary\uielements\uielement.h" FileLine="54" FileColumn="1" FunctionName="class UIElement::UIElement(DriverBase &amp;tft, Rectangle location, std::string elementName, eElementType elementType)" FunctionLineOffset="2" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='6f95282c-5fe6-4950-9647-32e9bdfc1372'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>47	
48	class UIElement
49	{
50	public:
51		UIElement(DriverBase &amp;tft, Rectangle location, std::string elementName, eElementType elementType) :
52			tft(tft)
53		{
--&gt;54			this-&gt;elementID = micros();
55			if (elementName == "")
56				this-&gt;elementName = this-&gt;elementID;
57			else
58				this-&gt;elementName = elementName;
59			this-&gt;location = location;
60			this-&gt;elementType = elementType;
61	#ifdef DEBUG
62			Logger::Trace("UIElement(TFT,(%d,%d,%d,%d), %s, %s)",
63				location.x1, location.y1, location.x2, location.y2,
</Source>
      </BreakPoint>
      <BreakPoint Index="4" Name="PicoWindows.ino, line 91" Id="a8631a39-4f83-40d3-a502-3b91a860f676" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\rohme\source\repos\pimower\arduino\windowlibrary\picowindows.ino" FileLine="91" FileColumn="1" FunctionName="loop()" FunctionLineOffset="4" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='a8631a39-4f83-40d3-a502-3b91a860f676'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>84	}
85	
86	// the loop function runs over and over again until power down or reset
87	void loop() 
88	{
89		if(!wm)
90			wm = WindowManager::instance(10, 9, 11, 13, 12, eLCDSizes::lcd800x480);
--&gt;91		wm-&gt;Update();
92	}
93	
94	/*
95	
96	// Library only supports hardware SPI at this time
97	// Connect SCLK to UNO Digital #13 (Hardware SPI clock)
98	// Connect MISO to UNO Digital #12 (Hardware SPI MISO)
99	// Connect MOSI to UNO Digital #11 (Hardware SPI MOSI)
100	#define RA8875_INT 3
</Source>
      </BreakPoint>
      <BreakPoint Index="5" Name="RA8875Driver.cpp, line 406" Id="aa821fa5-8814-4f74-8cbd-eb2c04012e51" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\rohme\source\repos\pimower\arduino\windowlibrary\driver\ra8875driver.cpp" FileLine="406" FileColumn="1" FunctionName="touched()" FunctionLineOffset="2" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='aa821fa5-8814-4f74-8cbd-eb2c04012e51'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>399		if (!checkInit())
400			return;
401		tft-&gt;touchEnable(value);
402	}
403	
404	bool RA8875Driver::touched()
405	{
--&gt;406		if (!checkInit())
407			return(false);
408		return tft-&gt;touched();
409	}
410	
411	bool RA8875Driver::touchRead(uint16_t *x, uint16_t *y)
412	{
413		if (!checkInit())
414			return(false);
415		return(tft-&gt;touchRead(x, y));
</Source>
      </BreakPoint>
      <BreakPoint Index="6" Name="RA8875Driver.cpp, line 408" Id="ff7deba2-9d3b-4265-acfd-82a32b8786d8" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\rohme\source\repos\pimower\arduino\windowlibrary\driver\ra8875driver.cpp" FileLine="408" FileColumn="1" FunctionName="touched()" FunctionLineOffset="4" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='ff7deba2-9d3b-4265-acfd-82a32b8786d8'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>401		tft-&gt;touchEnable(value);
402	}
403	
404	bool RA8875Driver::touched()
405	{
406		if (!checkInit())
407			return(false);
--&gt;408		return tft-&gt;touched();
409	}
410	
411	bool RA8875Driver::touchRead(uint16_t *x, uint16_t *y)
412	{
413		if (!checkInit())
414			return(false);
415		return(tft-&gt;touchRead(x, y));
416	}
417	
</Source>
      </BreakPoint>
      <BreakPoint Index="7" Name="Adafruit_RA8875.cpp, line 1151" Id="ff126c80-fdbe-4a10-976b-d9ff13f55296" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\rohme\source\repos\pimower\arduino\windowlibrary\external\adafruit_ra8875\adafruit_ra8875.cpp" FileLine="1151" FileColumn="1" FunctionName="touched(void)" FunctionLineOffset="2" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='ff126c80-fdbe-4a10-976b-d9ff13f55296'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>1144	      
1145	      @returns  True is a touch event has occured (reading it via
1146	                touchRead() will clear the interrupt in memory)
1147	*/
1148	/**************************************************************************/
1149	boolean Adafruit_RA8875::touched(void) 
1150	{
--&gt;1151	  if (readReg(RA8875_INTC2) &amp; RA8875_INTC2_TP) return true;
1152	  return false;
1153	}
1154	
1155	/**************************************************************************/
1156	/*!
1157	      Reads the last touch event
1158	      
1159	      @args x[out]  Pointer to the uint16_t field to assign the raw X value
1160	      @args y[out]  Pointer to the uint16_t field to assign the raw Y value
</Source>
      </BreakPoint>
      <BreakPoint Index="8" Name="WindowMananger.cpp, line 27" Id="3d2a6fbc-6c94-4771-867d-e36546c10e3c" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\rohme\source\repos\pimower\arduino\windowlibrary\windowmanager\windowmananger.cpp" FileLine="27" FileColumn="1" FunctionName="Update()" FunctionLineOffset="3" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='3d2a6fbc-6c94-4771-867d-e36546c10e3c'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>20	#endif
21	}
22	
23	void WindowManager::Update()
24	{
25		Logger::Trace("WindowManager::Update()");
26		processTouch();
--&gt;27		wmCanvas-&gt;Update();
28	}
29	
30	void WindowManager::RegisterElement(UIElement *element)
31	{
32		Logger::Trace("Entering RegisterElement");
33		elementMap.insert(std::make_pair(element-&gt;getElementID(), element));
34		elementOrder.push_back(element-&gt;getElementID());
35		WindowManager::wmCanvas-&gt;AddChildElement(element);	
36	}
</Source>
      </BreakPoint>
      <BreakPoint Index="9" Name="UIWindow.cpp, line 66" Id="c525bdc8-71a3-4a7c-a8d4-590b3b60dfa9" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="c:\users\rohme\source\repos\pimower\arduino\windowlibrary\uielements\uiwindow.cpp" FileLine="66" FileColumn="1" FunctionName="Update()" FunctionLineOffset="2" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='c525bdc8-71a3-4a7c-a8d4-590b3b60dfa9'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>59	{
60		this-&gt;isModal = isModal;
61		Invalidate();
62	}
63	
64	void UIWindow::Update()
65	{
--&gt;66		if (!updatePending)
67		{
68	#ifdef DEBUG
69			Logger::Trace("Update not pending");
70	#endif		
71			return;
72		}
73		Window::Draw(tft, location.x1, location.y1, location.width, location.height, titleBarColor,
74			titleTextColor, chromeColor, chromeColor, windowColor, titleText, titleBarFont, hasChrome,
75			hasTitleBar, hasCloseIcon, true, 4, 255);	
</Source>
      </BreakPoint>
    </BreakPoints>
  </Program>
</VisualMicro>